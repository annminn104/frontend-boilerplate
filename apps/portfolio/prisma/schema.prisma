generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Add your models here
enum UserRole {
  OWNER
  USER
}

model User {
  id           String         @id @default(cuid())
  clerkId      String         @unique
  email        String         @unique
  name         String?
  avatar       String?
  role         UserRole       @default(USER)
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  commentLikes CommentLike[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  messages     Message[]
  participants Participant[]
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String?
  imageUrl    String?
  demoUrl     String?
  githubUrl   String?
  tags        String[]
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PortfolioSection {
  id        String   @id @default(cuid())
  type      String   @unique
  title     String
  content   Json     @db.JsonB
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@unique([commentId, userId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  postId     String
  authorId   String
  parentId   String?
  isSpam     Boolean   @default(false)
  isReported Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author     User      @relation(fields: [authorId], references: [id])
  parent     Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentToComment")
  likes      Like[]
  commentLikes CommentLike[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
  @@index([commentId])
}

model Room {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  messages     Message[]
  participants Participant[]

  @@map("rooms")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roomId    String   @map("room_id")
  userId    String   @map("user_id")
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("messages")
}

model Participant {
  id         String   @id @default(cuid())
  roomId     String   @map("room_id")
  userId     String   @map("user_id")
  joinedAt   DateTime @default(now()) @map("joined_at")
  lastReadAt DateTime @default(now()) @map("last_read_at")
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@map("participants")
}
