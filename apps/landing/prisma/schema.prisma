// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  bio       String?  @db.Text
  avatar    String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  portfolio        Portfolio?
  posts           Post[]
  comments        Comment[]
  subscriptions   NewsletterSubscriber?
}

model Portfolio {
  id             String   @id @default(cuid())
  title          String
  description    String
  slug           String   @unique
  imageUrl       String?
  category       String
  technologies   String[]
  completionDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("portfolios")
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String?
  url         String?
  github      String?
  tags        String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model Post {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  content   String   @db.Text
  excerpt   String?  @db.Text
  image     String?
  tags      String[]
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([slug])
  @@index([published])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([postId])
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String   @db.Text
  status    String   @default("pending") // pending, read, replied
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  status    String   @default("active") // active, unsubscribed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
